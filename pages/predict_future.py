## @file prediction_app.py
#  @brief Application Streamlit pour pr√©dire l'humidit√© et la temp√©rature du sol.
#
#  Cette application charge un mod√®le LSTM et pr√©dit les valeurs pour l'ann√©e 2025
#  en se basant sur des donn√©es m√©t√©orologiques et de sol.

import streamlit as st
import pandas as pd
import numpy as np
import os
from datetime import datetime, timedelta
from tensorflow.keras.models import load_model  
from sklearn.preprocessing import MinMaxScaler

## Configuration de la page Streamlit
st.set_page_config(page_title="Pr√©diction future", layout="centered")
st.title(" Pr√©dire l'humidit√© et la temp√©rature du sol pour 2025")

## Initialisation des variables de session pour stocker les pr√©dictions
if "df_preds" not in st.session_state:
    st.session_state.df_preds = None
    st.session_state.pred_year = None

## Interface de configuration : ann√©e et mod√®le
st.subheader("Configuration de la pr√©diction")
col1, col2 = st.columns(2)

with col1:
    annee = 2025
    st.markdown("**Ann√©e √† pr√©dire :** 2025")

with col2:
    ## R√©cup√®re les mod√®les disponibles dans le dossier 'models'
    model_files = [f for f in os.listdir("models") if f.endswith(".h5") or f.endswith(".keras")]
    selected_model = st.selectbox("Mod√®le √† utiliser", model_files)

## D√©clenche la pr√©diction quand le bouton est cliqu√©
if st.button("Lancer la pr√©diction"):
    st.write(f"###  Mod√®le utilis√© : `{selected_model}`")
    st.write(f"###  Ann√©e √† pr√©dire : `{annee}`")

    with st.spinner("Chargement du mod√®le et des donn√©es..."):
        try:
            ## Chargement du mod√®le LSTM
            model = load_model(f"models/{selected_model}", compile=False)
            st.write(" Mod√®le charg√© avec succ√®s")
        except Exception as e:
            st.error(f"Erreur lors du chargement du mod√®le : {e}")
            st.stop()

        try:
            ## Chargement des donn√©es d'entra√Ænement et de test
            train_df = pd.read_csv("data/train_with_score.csv")
            test_file = f"data/test_{annee - 1}_with_score.csv"
            test_df = pd.read_csv(test_file)
            st.write(f" Donn√©es charg√©es : train={len(train_df)}, test={len(test_df)}")
        except Exception as e:
            st.error(f"Erreur lors du chargement des donn√©es : {e}")
            st.stop()

        ## D√©finition des colonnes utilis√©es comme entr√©es et cibles
        features = [
            'precip_mm', 'rain_mm', 'snow_mm', 't2m_max', 't2m_min', 't2m_mean',
            'app_tmax', 'app_tmin', 'sun_h', 'wind10_max', 'gust10_max', 'winddir',
            'sw_rad', 'et0', 'soil_m0_7', 'soil_t0_7']
        targets = ['soil_m0_7', 'soil_t0_7', 'agri_score']

        # V√©rification de la pr√©sence des colonnes n√©cessaires
        for col in features + targets:
            if col not in train_df.columns or col not in test_df.columns:
                st.error(f"Colonne manquante dans les donn√©es : {col}")
                st.stop()

        ## Normalisation des donn√©es
        scaler_x = MinMaxScaler().fit(train_df[features])
        scaler_y = MinMaxScaler().fit(train_df[targets])
        st.write(" Normalisation effectu√©e")

    ## G√©n√©ration de dates futures pour 2025
    st.write("### Pr√©paration des donn√©es de pr√©diction")
    future_dates = [datetime(annee, 1, 1) + timedelta(days=i) for i in range(365)]

    ## Pr√©paration des donn√©es futures (copie de la derni√®re ligne)
    df_future = test_df.copy()
    for i in range(len(future_dates)):
        df_future = pd.concat([df_future, pd.DataFrame([df_future.iloc[-1]])], ignore_index=True)
        df_future.at[df_future.index[-1], 'date'] = future_dates[i].strftime("%Y-%m-%d")

    ## Fusion des donn√©es train, test, et futures
    full_input = pd.concat([train_df, test_df, df_future], ignore_index=True)
    full_scaled = scaler_x.transform(full_input[features])
    st.write(f" Forme des donn√©es d'entr√©e : {full_scaled.shape}")

    ## Lancement de la boucle de pr√©diction s√©quentielle
    st.write("###  Pr√©diction en cours...")
    seq_len = 60
    predictions_scaled = []
    start_idx = len(full_scaled) - len(df_future) - seq_len
    current_seq = full_scaled[start_idx:start_idx + seq_len]

    if current_seq.shape != (seq_len, len(features)):
        st.error(f"Erreur de forme : attendu ({seq_len}, {len(features)}), obtenu {current_seq.shape}")
        st.stop()

    progress_bar = st.progress(0)

    for i in range(len(future_dates)):
        try:
            input_seq = current_seq[np.newaxis, :, :]  # (1, 60, n_features)
            pred = model.predict(input_seq, verbose=0)[0]
            predictions_scaled.append(pred)

            # Mise √† jour des entr√©es avec les pr√©dictions pr√©c√©dentes
            next_input = full_scaled[start_idx + seq_len + i].copy()
            next_input[-2:] = pred[:2]  # soil_m0_7 et soil_t0_7
            current_seq = np.vstack([current_seq[1:], next_input])
            progress_bar.progress((i + 1) / len(future_dates))
        except Exception as e:
            st.error(f"Erreur pendant la pr√©diction √† l'it√©ration {i} : {e}")
            st.stop()

    ## Inversion de la normalisation et cr√©ation du DataFrame de sortie
    preds = scaler_y.inverse_transform(predictions_scaled)
    df_preds = pd.DataFrame(preds, columns=['soil_m0_7_pred', 'soil_t0_7_pred', 'agri_score_pred'])
    df_preds['date'] = pd.to_datetime(future_dates)

    ## Sauvegarde des r√©sultats et stockage en session
    st.session_state.df_preds = df_preds
    st.session_state.pred_year = annee

    output_path = f"data/prediction_{annee}.csv"
    df_preds.to_csv(output_path, index=False)
    st.success(f" Pr√©dictions sauvegard√©es dans `{output_path}`")

# === Affichage ===
if st.session_state.df_preds is not None:
    df_preds = st.session_state.df_preds

    ## S√©lection de date pour afficher les pr√©dictions correspondantes
    st.write("## üóìÔ∏è Explorer les pr√©dictions par date")
    selected_date = st.date_input("S√©lectionner une date", df_preds['date'].min())
    row = df_preds[df_preds['date'] == pd.to_datetime(selected_date)]

    if not row.empty:
        row = row.iloc[0]
        st.markdown(f"### R√©sultats pour le {selected_date.strftime('%d %B %Y')}")
        st.markdown(f"- **Humidit√© du sol** : {row['soil_m0_7_pred']:.3f}")
        st.markdown(f"- **Temp√©rature du sol** : {row['soil_t0_7_pred']:.3f}")
        st.markdown(f"- **Score agricole estim√©** : {row['agri_score_pred']:.3f}")
    else:
        st.warning("Aucune donn√©e pour cette date.")

    ## Graphiques de tendance annuelle
    st.write("## üìà Visualisation annuelle")
    st.line_chart(df_preds.set_index("date")['soil_m0_7_pred'])
    st.line_chart(df_preds.set_index("date")['soil_t0_7_pred'])

    ## Comparaison avec les donn√©es r√©elles si disponibles
    compare_file = f"data/test_{annee}_with_score.csv"
    if os.path.exists(compare_file):
        real_df = pd.read_csv(compare_file)
        real_df['date'] = pd.to_datetime(real_df['date'])
        merged = pd.merge(df_preds, real_df, on="date", suffixes=("_pred", "_real"))

        st.write("## üîç Comparaison avec les donn√©es r√©elles")
        st.line_chart(merged.set_index("date")[['soil_m0_7_pred', 'soil_m0_7']])
        st.line_chart(merged.set_index("date")[['soil_t0_7_pred', 'soil_t0_7']])